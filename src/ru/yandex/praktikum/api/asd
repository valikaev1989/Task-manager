				String lastLikeInfoStr = "{ \"user\": \"Алексей\", \"hours\": 12, \"minutes\": 30}";
                Gson gson = new Gson();
				LastLikeInfo lastLikeInfo = gson.fromJson(lastLikeInfoStr, LastLikeInfo.class);// код десериализации
        LikesInfo likesInfo = new LikesInfo();
        likesInfo.setRepostsCount(10);
        likesInfo.setHasOwnerLiked(true);
				likesInfo.setLastLikeInfo(lastLikeInfo);
        likesInfo.setLikes(new Like[]{
                new Like("Алексей", "http://example.com/avatars/aleksey.jpg"),
                new Like("Елена", "http://example.com/avatars/elena.jpg"),
                new Like("Света", "http://example.com/avatars/sveta.jpg"),
        });
    String jsonString = gson.toJson(likesInfo);
        System.out.println(jsonString);


                GsonBuilder gsonBuilder = new GsonBuilder();
                gsonBuilder.setPrettyPrinting();
                gsonBuilder.serializeNulls();
                gsonBuilder.registerTypeAdapter(LocalDate.class, new LocalDateAdapter());
                Gson gson = gsonBuilder.create();
                String postSerialized = gson.toJson(post);


                class LocalDateAdapter extends TypeAdapter<LocalDate> {
                    private static final DateTimeFormatter formatterWriter = DateTimeFormatter.ofPattern("dd--MM--yyyy");
                    private static final DateTimeFormatter formatterReader = DateTimeFormatter.ofPattern("dd.MM.yyyy");

                    @Override
                    public void write(final JsonWriter jsonWriter, final LocalDate localDate) throws IOException {
                        jsonWriter.value(localDate.format(formatterWriter));
                    }

                    @Override
                    public LocalDate read(final JsonReader jsonReader) throws IOException {
                        return LocalDate.parse(jsonReader.nextString(), formatterReader);
                    }