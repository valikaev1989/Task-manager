				String lastLikeInfoStr = "{ \"user\": \"Алексей\", \"hours\": 12, \"minutes\": 30}";
                Gson gson = new Gson();
				LastLikeInfo lastLikeInfo = gson.fromJson(lastLikeInfoStr, LastLikeInfo.class);// код десериализации
        LikesInfo likesInfo = new LikesInfo();
        likesInfo.setRepostsCount(10);
        likesInfo.setHasOwnerLiked(true);
				likesInfo.setLastLikeInfo(lastLikeInfo);
        likesInfo.setLikes(new Like[]{
                new Like("Алексей", "http://example.com/avatars/aleksey.jpg"),
                new Like("Елена", "http://example.com/avatars/elena.jpg"),
                new Like("Света", "http://example.com/avatars/sveta.jpg"),
        });
    String jsonString = gson.toJson(likesInfo);
        System.out.println(jsonString);


                GsonBuilder gsonBuilder = new GsonBuilder();
                gsonBuilder.setPrettyPrinting();
                gsonBuilder.serializeNulls();
                gsonBuilder.registerTypeAdapter(LocalDate.class, new LocalDateAdapter());
                Gson gson = gsonBuilder.create();
                String postSerialized = gson.toJson(post);


                class LocalDateAdapter extends TypeAdapter<LocalDate> {
                    private static final DateTimeFormatter formatterWriter = DateTimeFormatter.ofPattern("dd--MM--yyyy");
                    private static final DateTimeFormatter formatterReader = DateTimeFormatter.ofPattern("dd.MM.yyyy");

                    @Override
                    public void write(final JsonWriter jsonWriter, final LocalDate localDate) throws IOException {
                        jsonWriter.value(localDate.format(formatterWriter));
                    }

                    @Override
                    public LocalDate read(final JsonReader jsonReader) throws IOException {
                        return LocalDate.parse(jsonReader.nextString(), formatterReader);
                    }

                    public static void main(String[] args) {
                            HttpClient client = HttpClient.newHttpClient();

                            URI url = URI.create("https://api.exchangerate.host/latest?base=RUB&symbols=USD,EUR,JPY");
                            HttpRequest request = HttpRequest.newBuilder()
                                    .uri(url)
                                    .GET()
                                    .build();

                            try {
                                HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
                                // проверяем, успешно ли обработан запрос
                                if (response.statusCode() == 200) {
                                    JsonElement jsonElement = JsonParser.parseString(response.body());
                                    if (!jsonElement.isJsonObject()) { // проверяем, точно ли мы получили JSON-объект
                                        System.out.println("Ответ от сервера не соответствует ожидаемому.");
                                        return;
                                    }
                                    JsonObject json= jsonElement.getAsJsonObject();
                                    JsonObject jsonObject = (JsonObject) json.get("rates");
                                    // получите курс доллара и евро и запишите в переменные rateUSD и rateEUR
                                    double rateUSD = jsonObject.get("USD").getAsDouble();
                                    double rateEUR = jsonObject.get("EUR").getAsDouble();

                                    System.out.println("Стоимость рубля в долларах: " + rateUSD + " USD");
                                    System.out.println("Стоимость рубля в евро: " + rateEUR + " EUR");
                                } else {
                                    System.out.println("Что-то пошло не так. Сервер вернул код состояния: " + response.statusCode());
                                }
                            } catch (IOException | InterruptedException e) { // обрабатываем ошибки отправки запроса
                                System.out.println("Во время выполнения запроса возникла ошибка.\n" +
                                        "Проверьте, пожалуйста, адрес и повторите попытку.");
                            }
                        }
                    }